{"version":3,"sources":["Contexts/BookContext.js","Components/Navbar.js","Components/BookList.js","Components/BookForm.js","Components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","children","useState","books","setBooks","Provider","value","addBook","book","Navbar","useEffect","elems","document","querySelectorAll","window","M","Sidenav","init","edge","className","href","data-target","BookList","useContext","map","key","title","author","BookForm","setBook","handleChange","e","target","name","onSubmit","preventDefault","type","id","onChange","required","htmlFor","Dashboard","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAEaA,EAAcC,0BAgBZC,EAda,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACdC,mBAAS,IADK,mBACjCC,EADiC,KAC1BC,EAD0B,KAOxC,OACI,kBAACN,EAAYO,SAAb,CAAsBC,MAAO,CAACH,QAAOI,QALzB,SAAAC,GACZJ,EAAS,GAAD,mBAAKD,GAAL,gBAAgBK,SAKnBP,ICkBEQ,EA7BA,WAMX,OALAC,qBAAU,WACN,IAAMC,EAAQC,SAASC,iBAAiB,YACxCC,OAAOC,EAAEC,QAAQC,KAAKN,EAAO,CAACO,KAAM,aAIpC,kBAAC,WAAD,KACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,eACX,uBAAGA,UAAU,SAAb,OACQ,uCAER,uBACIC,KAAK,KACLC,cAAY,YACZF,UAAU,yBAEV,uBAAGA,UAAU,kBAAb,SAEJ,wBAAIA,UAAU,mCCKnBG,EAxBE,WAAO,IACbnB,EAASoB,qBAAWzB,GAApBK,MAEP,OACI,yBAAKgB,UAAU,yBACX,yBAAKA,UAAU,aACX,qCACA,4BACKhB,EAAMqB,KAAI,SAAAhB,GAAI,OACX,wBAAIiB,IAAKjB,GACL,yBAAKW,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,cAAcX,EAAKkB,OAClC,yBAAKP,UAAU,eAAeX,EAAKmB,kB,OCmDxDC,EAhEE,WAAO,IACbrB,EAAWgB,qBAAWzB,GAAtBS,QADY,EAGKL,mBAAS,CAC7BwB,MAAO,GACPC,OAAQ,KALO,mBAGZnB,EAHY,KAGNqB,EAHM,KAiBbC,EAAe,SAAAC,GACjBF,EAAQ,eAAIrB,EAAL,eAAYuB,EAAEC,OAAOC,KAAOF,EAAEC,OAAO1B,UAGhD,OACI,yBAAKa,UAAU,WACX,yBAAKA,UAAU,aACX,wCACA,0BAAMe,SAjBG,SAAAH,GACjBA,EAAEI,iBACF5B,EAAQC,GACRqB,EAAQ,CACJH,MAAO,GACPC,OAAQ,OAaA,yBAAKR,UAAU,eACX,2BACIiB,KAAK,OACLC,GAAG,QACHJ,KAAK,QACL3B,MAAOE,EAAKkB,MACZY,SAAUR,EACVX,UAAU,WACVoB,UAAQ,IAEZ,2BAAOpB,UAAU,SAASqB,QAAQ,SAAlC,UAEJ,yBAAKrB,UAAU,eACX,2BACIiB,KAAK,OACLC,GAAG,SACHJ,KAAK,SACL3B,MAAOE,EAAKmB,OACZW,SAAUR,EACVX,UAAU,WACVoB,UAAQ,IAEZ,2BAAOpB,UAAU,SAASqB,QAAQ,UAAlC,WAEJ,yBAAKrB,UAAU,sBACX,4BACIiB,KAAK,SACLjB,UAAU,wCAEV,uBAAGA,UAAU,wBAAb,cAJJ,YCzCTsB,EATG,WACd,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCQGC,G,MATH,WACV,OACE,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c22d0685.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react';\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = ({children}) => {\r\n    const [books, setBooks] = useState([]);\r\n\r\n    const addBook = book => {\r\n        setBooks([...books, {...book}]);\r\n    };\r\n\r\n    return (\r\n        <BookContext.Provider value={{books, addBook}}>\r\n            {children}\r\n        </BookContext.Provider>\r\n    );\r\n};\r\n\r\nexport default BookContextProvider; ","import React, {Fragment, useEffect} from 'react';\r\n\r\nconst Navbar = () => {\r\n    useEffect(() => {\r\n        const elems = document.querySelectorAll('.sidenav');\r\n        window.M.Sidenav.init(elems, {edge: 'right'});\r\n    });\r\n\r\n    return (\r\n        <Fragment>\r\n            <nav className=\"z-depth-0\">\r\n                <div className=\"nav-wrapper\">\r\n                    <a className=\"brand\">\r\n                        Book<span>List</span>\r\n                    </a>\r\n                    <a \r\n                        href=\"#!\"\r\n                        data-target=\"slide-out\"\r\n                        className=\"right sidenav-trigger\"\r\n                    >\r\n                        <i className=\"material-icons\">menu</i>\r\n                    </a>\r\n                    <ul className=\"right hide-on-med-and-down\">\r\n                        \r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, {useContext} from 'react';\r\nimport {BookContext} from '../Contexts/BookContext';\r\n\r\nconst BookList = () => {\r\n    const {books} = useContext(BookContext);\r\n\r\n    return (\r\n        <div className=\"section section-books\">\r\n            <div className=\"container\">\r\n                <h6>Books</h6>\r\n                <ul>\r\n                    {books.map(book => (\r\n                        <li key={book}>\r\n                            <div className=\"card book\">\r\n                                <div className=\"book-details\">\r\n                                    <div className=\"book-title\">{book.title}</div>\r\n                                    <div className=\"book-author\">{book.author}</div>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookList;","import React, {useContext, useState} from 'react';\r\nimport {BookContext} from '../Contexts/BookContext';\r\n\r\nconst BookForm = () => {\r\n    const {addBook} = useContext(BookContext);\r\n\r\n    const [book, setBook] = useState({\r\n        title: '',\r\n        author: ''\r\n    });\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        addBook(book);\r\n        setBook({\r\n            title: '',\r\n            author: ''\r\n        });\r\n    };\r\n\r\n    const handleChange = e => {\r\n        setBook({...book, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"container\">\r\n                <h6>New Book</h6>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"input-field\">\r\n                        <input \r\n                            type=\"text\"\r\n                            id=\"title\"\r\n                            name=\"title\"\r\n                            value={book.title}\r\n                            onChange={handleChange}\r\n                            className=\"validate\"\r\n                            required\r\n                        />\r\n                        <label className=\"active\" htmlFor=\"title\">Title</label>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input \r\n                            type=\"text\"\r\n                            id=\"author\"\r\n                            name=\"author\"\r\n                            value={book.author}\r\n                            onChange={handleChange}\r\n                            className=\"validate\"\r\n                            required\r\n                        />\r\n                        <label className=\"active\" htmlFor=\"author\">Author</label>\r\n                    </div>\r\n                    <div className=\"input-field center\">\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn waves-effect waves-light #45c9b3\"\r\n                        >\r\n                            <i className=\"material-icons right\">add_circle</i>Add\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookForm;","import React, {Fragment} from 'react';\r\nimport BookList from './BookList';\r\nimport BookForm from './BookForm';\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <Fragment>\r\n            <BookList />\r\n            <BookForm />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\nimport BookContextProvider from './Contexts/BookContext';\nimport Navbar from './Components/Navbar';\nimport Dashboard from './Components/Dashboard';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BookContextProvider>\n        <Navbar />\n        <Dashboard />\n    </BookContextProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}